/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationEanRequest,
  AuthenticationKeyRequest,
  AuthenticationLDAPRequest,
  AuthenticationLocalRequest,
  AuthenticationMockRequest,
  AuthenticationNfcRequest,
  AuthenticationPinRequest,
  AuthenticationResetTokenRequest,
  AuthenticationResponse,
  GEWISAuthenticationPinRequest,
  GewiswebAuthenticationRequest,
  MessageResponse,
  ResetLocalRequest,
} from '../models';
import {
    AuthenticationEanRequestFromJSON,
    AuthenticationEanRequestToJSON,
    AuthenticationKeyRequestFromJSON,
    AuthenticationKeyRequestToJSON,
    AuthenticationLDAPRequestFromJSON,
    AuthenticationLDAPRequestToJSON,
    AuthenticationLocalRequestFromJSON,
    AuthenticationLocalRequestToJSON,
    AuthenticationMockRequestFromJSON,
    AuthenticationMockRequestToJSON,
    AuthenticationNfcRequestFromJSON,
    AuthenticationNfcRequestToJSON,
    AuthenticationPinRequestFromJSON,
    AuthenticationPinRequestToJSON,
    AuthenticationResetTokenRequestFromJSON,
    AuthenticationResetTokenRequestToJSON,
    AuthenticationResponseFromJSON,
    AuthenticationResponseToJSON,
    GEWISAuthenticationPinRequestFromJSON,
    GEWISAuthenticationPinRequestToJSON,
    GewiswebAuthenticationRequestFromJSON,
    GewiswebAuthenticationRequestToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
    ResetLocalRequestFromJSON,
    ResetLocalRequestToJSON,
} from '../models';

export interface AuthenticationKeyPostRequest {
    req: AuthenticationKeyRequest;
}

export interface AuthenticationNfcPostRequest {
    req: AuthenticationNfcRequest;
}

export interface EanAuthenticationRequest {
    req: AuthenticationEanRequest;
}

export interface GewisLDAPAuthenticationRequest {
    req: AuthenticationLDAPRequest;
}

export interface GewisPinAuthenticationRequest {
    req: GEWISAuthenticationPinRequest;
}

export interface GewisWebAuthenticationRequest {
    req: GewiswebAuthenticationRequest;
}

export interface LdapAuthenticationRequest {
    req: AuthenticationLDAPRequest;
}

export interface LocalAuthenticationRequest {
    req: AuthenticationLocalRequest;
}

export interface MockAuthenticationRequest {
    req: AuthenticationMockRequest;
}

export interface PinAuthenticationRequest {
    req: AuthenticationPinRequest;
}

export interface ResetLocalOperationRequest {
    req: ResetLocalRequest;
}

export interface ResetLocalWithTokenRequest {
    req: AuthenticationResetTokenRequest;
}

/**
 * 
 */
export class AuthenticateApi extends runtime.BaseAPI {

    /**
     *  Key login and hand out token.
     */
    async authenticationKeyPostRaw(requestParameters: AuthenticationKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling authenticationKeyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationKeyRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  Key login and hand out token.
     */
    async authenticationKeyPost(requestParameters: AuthenticationKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.authenticationKeyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  NFC login and hand out token
     */
    async authenticationNfcPostRaw(requestParameters: AuthenticationNfcPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling authenticationNfcPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/nfc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationNfcRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  NFC login and hand out token
     */
    async authenticationNfcPost(requestParameters: AuthenticationNfcPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.authenticationNfcPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  EAN login and hand out token
     */
    async eanAuthenticationRaw(requestParameters: EanAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling eanAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/ean`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEanRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  EAN login and hand out token
     */
    async eanAuthentication(requestParameters: EanAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.eanAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  LDAP login and hand out token    If user has never signed in before this also creates an GEWIS account.
     */
    async gewisLDAPAuthenticationRaw(requestParameters: GewisLDAPAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling gewisLDAPAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/GEWIS/LDAP`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationLDAPRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  LDAP login and hand out token    If user has never signed in before this also creates an GEWIS account.
     */
    async gewisLDAPAuthentication(requestParameters: GewisLDAPAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.gewisLDAPAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  PIN login and hand out token.
     */
    async gewisPinAuthenticationRaw(requestParameters: GewisPinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling gewisPinAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/GEWIS/pin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GEWISAuthenticationPinRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  PIN login and hand out token.
     */
    async gewisPinAuthentication(requestParameters: GewisPinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.gewisPinAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  GEWIS login verification based on gewisweb JWT tokens. This method verifies the validity of the gewisweb JWT token, and returns a SudoSOS token if the GEWIS token is valid.
     */
    async gewisWebAuthenticationRaw(requestParameters: GewisWebAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling gewisWebAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/gewisweb`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GewiswebAuthenticationRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  GEWIS login verification based on gewisweb JWT tokens. This method verifies the validity of the gewisweb JWT token, and returns a SudoSOS token if the GEWIS token is valid.
     */
    async gewisWebAuthentication(requestParameters: GewisWebAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.gewisWebAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  LDAP login and hand out token If user has never signed in before this also creates an account.
     */
    async ldapAuthenticationRaw(requestParameters: LdapAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling ldapAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/LDAP`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationLDAPRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  LDAP login and hand out token If user has never signed in before this also creates an account.
     */
    async ldapAuthentication(requestParameters: LdapAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.ldapAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Local login and hand out token
     */
    async localAuthenticationRaw(requestParameters: LocalAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling localAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/local`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationLocalRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  Local login and hand out token
     */
    async localAuthentication(requestParameters: LocalAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.localAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Mock login and hand out token.
     */
    async mockAuthenticationRaw(requestParameters: MockAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling mockAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/mock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationMockRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  Mock login and hand out token.
     */
    async mockAuthentication(requestParameters: MockAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.mockAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  PIN login and hand out token
     */
    async pinAuthenticationRaw(requestParameters: PinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling pinAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/pin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationPinRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  PIN login and hand out token
     */
    async pinAuthentication(requestParameters: PinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.pinAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get a new JWT token, lesser if the existing token is also lesser
     */
    async refreshTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/authentication/refreshToken`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  Get a new JWT token, lesser if the existing token is also lesser
     */
    async refreshToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.refreshTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     *  Creates a reset token for the local authentication
     */
    async resetLocalRaw(requestParameters: ResetLocalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling resetLocal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/local/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetLocalRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Creates a reset token for the local authentication
     */
    async resetLocal(requestParameters: ResetLocalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetLocalRaw(requestParameters, initOverrides);
    }

    /**
     *  Reset local authentication using the provided token
     */
    async resetLocalWithTokenRaw(requestParameters: ResetLocalWithTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.req === null || requestParameters.req === undefined) {
            throw new runtime.RequiredError('req','Required parameter requestParameters.req was null or undefined when calling resetLocalWithToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/local`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationResetTokenRequestToJSON(requestParameters.req),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Reset local authentication using the provided token
     */
    async resetLocalWithToken(requestParameters: ResetLocalWithTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetLocalWithTokenRaw(requestParameters, initOverrides);
    }

}
