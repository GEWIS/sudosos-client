/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BannerRequest,
  BannerResponse,
  PaginatedBannerResponse,
} from '../models';
import {
    BannerRequestFromJSON,
    BannerRequestToJSON,
    BannerResponseFromJSON,
    BannerResponseToJSON,
    PaginatedBannerResponseFromJSON,
    PaginatedBannerResponseToJSON,
} from '../models';

export interface DeleteRequest {
    id: number;
}

export interface BannersGetRequest {
    take?: number;
    skip?: number;
}

export interface CreateRequest {
    banner: BannerRequest;
}

export interface GetActiveRequest {
    take?: number;
    skip?: number;
}

export interface GetBannerRequest {
    id: number;
}

export interface OpenBannersGetRequest {
    take?: number;
    skip?: number;
}

export interface UpdateRequest {
    id: number;
    banner: BannerRequest;
}

export interface UpdateImageRequest {
    id: number;
    file?: Blob;
}

/**
 * 
 */
export class BannersApi extends runtime.BaseAPI {

    /**
     *  Deletes the requested banner
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannerResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerResponseFromJSON(jsonValue));
    }

    /**
     *  Deletes the requested banner
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannerResponse> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all existing banners
     */
    async bannersGetRaw(requestParameters: BannersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBannerResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/banners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBannerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all existing banners
     */
    async bannersGet(requestParameters: BannersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBannerResponse> {
        const response = await this.bannersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Saves a banner to the database
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannerResponse>> {
        if (requestParameters.banner === null || requestParameters.banner === undefined) {
            throw new runtime.RequiredError('banner','Required parameter requestParameters.banner was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/banners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BannerRequestToJSON(requestParameters.banner),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerResponseFromJSON(jsonValue));
    }

    /**
     *  Saves a banner to the database
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannerResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all active banners
     */
    async getActiveRaw(requestParameters: GetActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBannerResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/banners/active`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBannerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all active banners
     */
    async getActive(requestParameters: GetActiveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBannerResponse> {
        const response = await this.getActiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the requested banner
     */
    async getBannerRaw(requestParameters: GetBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannerResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the requested banner
     */
    async getBanner(requestParameters: GetBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannerResponse> {
        const response = await this.getBannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all existing banners
     */
    async openBannersGetRaw(requestParameters: OpenBannersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBannerResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/open/banners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBannerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all existing banners
     */
    async openBannersGet(requestParameters: OpenBannersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBannerResponse> {
        const response = await this.openBannersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Updates the requested banner
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannerResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.banner === null || requestParameters.banner === undefined) {
            throw new runtime.RequiredError('banner','Required parameter requestParameters.banner was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BannerRequestToJSON(requestParameters.banner),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerResponseFromJSON(jsonValue));
    }

    /**
     *  Updates the requested banner
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannerResponse> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Uploads a banner image to the given banner
     */
    async updateImageRaw(requestParameters: UpdateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/banners/{id}/image`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Uploads a banner image to the given banner
     */
    async updateImage(requestParameters: UpdateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateImageRaw(requestParameters, initOverrides);
    }

}
