/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptTosRequest,
  AuthenticationResponse,
  CreateUserRequest,
  PaginatedBaseTransactionResponse,
  PaginatedContainerResponse,
  PaginatedFinancialMutationResponse,
  PaginatedPointOfSaleResponse,
  PaginatedProductResponse,
  PaginatedTransferResponse,
  PaginatedUpdatedPointOfSaleResponse,
  PaginatedUserResponse,
  RoleResponse,
  TransactionReportResponse,
  UpdateKeyResponse,
  UpdateLocalRequest,
  UpdateNfcRequest,
  UpdatePinRequest,
  UpdateUserRequest,
  User,
  UserResponse,
} from '../models';
import {
    AcceptTosRequestFromJSON,
    AcceptTosRequestToJSON,
    AuthenticationResponseFromJSON,
    AuthenticationResponseToJSON,
    CreateUserRequestFromJSON,
    CreateUserRequestToJSON,
    PaginatedBaseTransactionResponseFromJSON,
    PaginatedBaseTransactionResponseToJSON,
    PaginatedContainerResponseFromJSON,
    PaginatedContainerResponseToJSON,
    PaginatedFinancialMutationResponseFromJSON,
    PaginatedFinancialMutationResponseToJSON,
    PaginatedPointOfSaleResponseFromJSON,
    PaginatedPointOfSaleResponseToJSON,
    PaginatedProductResponseFromJSON,
    PaginatedProductResponseToJSON,
    PaginatedTransferResponseFromJSON,
    PaginatedTransferResponseToJSON,
    PaginatedUpdatedPointOfSaleResponseFromJSON,
    PaginatedUpdatedPointOfSaleResponseToJSON,
    PaginatedUserResponseFromJSON,
    PaginatedUserResponseToJSON,
    RoleResponseFromJSON,
    RoleResponseToJSON,
    TransactionReportResponseFromJSON,
    TransactionReportResponseToJSON,
    UpdateKeyResponseFromJSON,
    UpdateKeyResponseToJSON,
    UpdateLocalRequestFromJSON,
    UpdateLocalRequestToJSON,
    UpdateNfcRequestFromJSON,
    UpdateNfcRequestToJSON,
    UpdatePinRequestFromJSON,
    UpdatePinRequestToJSON,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models';

export interface AcceptTosOperationRequest {
    params: AcceptTosRequest;
}

export interface AuthenticateAsRequest {
    id: number;
}

export interface CreateUserOperationRequest {
    user: CreateUserRequest;
}

export interface DeleteUserRequest {
    id: number;
}

export interface DeleteUserKeyRequest {
    id: number;
}

export interface DeleteUserNfcRequest {
    id: number;
}

export interface GetAllUsersRequest {
    take?: number;
    skip?: number;
    search?: string;
    active?: boolean;
    ofAge?: boolean;
    id?: number;
    type?: number;
}

export interface GetAllUsersOfUserTypeRequest {
    userType: string;
    take?: number;
    skip?: number;
}

export interface GetIndividualUserRequest {
    id: number;
}

export interface GetOrganMembersRequest {
    id: number;
}

export interface GetUserAuthenticatableRequest {
    id: number;
}

export interface GetUserRolesRequest {
    id: number;
}

export interface GetUsersContainersRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUsersFinancialMutationsRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUsersPointsOfSaleRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUsersProcessingDepositsRequest {
    id: number;
}

export interface GetUsersProductsRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUsersTransactionsRequest {
    id: number;
    fromId?: number;
    createdById?: number;
    toId?: number;
    productId?: number;
    productRevision?: number;
    fromDate?: string;
    tillDate?: string;
    take?: number;
    skip?: number;
}

export interface GetUsersTransfersRequest {
    id: number;
    take?: number;
    skip?: number;
    fromId?: number;
    toId?: number;
    id2?: number;
}

export interface GetUsersUpdatedContainersRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUsersUpdatedPointsOfSaleRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUsersUpdatedProductsRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface UpdateUserOperationRequest {
    id: number;
    user: UpdateUserRequest;
}

export interface UpdateUserKeyRequest {
    id: number;
}

export interface UpdateUserLocalPasswordRequest {
    id: number;
    update: UpdateLocalRequest;
}

export interface UpdateUserNfcRequest {
    id: number;
    update: UpdateNfcRequest;
}

export interface UpdateUserPinRequest {
    id: number;
    update: UpdatePinRequest;
}

export interface UsersIdTransactionsReportGetRequest {
    id: number;
    fromDate?: string;
    tillDate?: string;
    fromId?: number;
    toId?: number;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     *  Accept the Terms of Service if you have not accepted it yet
     */
    async acceptTosRaw(requestParameters: AcceptTosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.params === null || requestParameters.params === undefined) {
            throw new runtime.RequiredError('params','Required parameter requestParameters.params was null or undefined when calling acceptTos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/acceptTos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptTosRequestToJSON(requestParameters.params),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Accept the Terms of Service if you have not accepted it yet
     */
    async acceptTos(requestParameters: AcceptTosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acceptTosRaw(requestParameters, initOverrides);
    }

    /**
     *  Authenticate as another user
     */
    async authenticateAsRaw(requestParameters: AuthenticateAsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling authenticateAs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     *  Authenticate as another user
     */
    async authenticateAs(requestParameters: AuthenticateAsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.authenticateAsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Create a new user
     */
    async createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     *  Create a new user
     */
    async createUser(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Delete a single user
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Delete a single user
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     *  Delete a users key code
     */
    async deleteUserKeyRaw(requestParameters: DeleteUserKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticator/key`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Delete a users key code
     */
    async deleteUserKey(requestParameters: DeleteUserKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserKeyRaw(requestParameters, initOverrides);
    }

    /**
     *  Delete a nfc code
     */
    async deleteUserNfcRaw(requestParameters: DeleteUserNfcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserNfc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticator/nfc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Delete a nfc code
     */
    async deleteUserNfc(requestParameters: DeleteUserNfcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserNfcRaw(requestParameters, initOverrides);
    }

    /**
     *  Get a list of all users
     */
    async getAllUsersRaw(requestParameters: GetAllUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.ofAge !== undefined) {
            queryParameters['ofAge'] = requestParameters.ofAge;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserResponseFromJSON(jsonValue));
    }

    /**
     *  Get a list of all users
     */
    async getAllUsers(requestParameters: GetAllUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserResponse> {
        const response = await this.getAllUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get all users of user type
     */
    async getAllUsersOfUserTypeRaw(requestParameters: GetAllUsersOfUserTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserResponse>> {
        if (requestParameters.userType === null || requestParameters.userType === undefined) {
            throw new runtime.RequiredError('userType','Required parameter requestParameters.userType was null or undefined when calling getAllUsersOfUserType.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/usertype/{userType}`.replace(`{${"userType"}}`, encodeURIComponent(String(requestParameters.userType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserResponseFromJSON(jsonValue));
    }

    /**
     *  Get all users of user type
     */
    async getAllUsersOfUserType(requestParameters: GetAllUsersOfUserTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserResponse> {
        const response = await this.getAllUsersOfUserTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get an individual user
     */
    async getIndividualUserRaw(requestParameters: GetIndividualUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIndividualUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     *  Get an individual user
     */
    async getIndividualUser(requestParameters: GetIndividualUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getIndividualUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get an organs members
     */
    async getOrganMembersRaw(requestParameters: GetOrganMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserResponseFromJSON(jsonValue));
    }

    /**
     *  Get an organs members
     */
    async getOrganMembers(requestParameters: GetOrganMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserResponse> {
        const response = await this.getOrganMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get all users that the user can authenticate as
     */
    async getUserAuthenticatableRaw(requestParameters: GetUserAuthenticatableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserAuthenticatable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseFromJSON));
    }

    /**
     *  Get all users that the user can authenticate as
     */
    async getUserAuthenticatable(requestParameters: GetUserAuthenticatableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponse>> {
        const response = await this.getUserAuthenticatableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get all roles assigned to the user.
     */
    async getUserRolesRaw(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleResponse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleResponseFromJSON));
    }

    /**
     *  Get all roles assigned to the user.
     */
    async getUserRoles(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleResponse>> {
        const response = await this.getUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the user\'s containers
     */
    async getUsersContainersRaw(requestParameters: GetUsersContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContainerResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersContainers.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/containers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContainerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the user\'s containers
     */
    async getUsersContainers(requestParameters: GetUsersContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContainerResponse> {
        const response = await this.getUsersContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get all financial mutations of a user.
     */
    async getUsersFinancialMutationsRaw(requestParameters: GetUsersFinancialMutationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFinancialMutationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersFinancialMutations.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/financialmutations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFinancialMutationResponseFromJSON(jsonValue));
    }

    /**
     *  Get all financial mutations of a user.
     */
    async getUsersFinancialMutations(requestParameters: GetUsersFinancialMutationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFinancialMutationResponse> {
        const response = await this.getUsersFinancialMutationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the user\'s Points of Sale
     */
    async getUsersPointsOfSaleRaw(requestParameters: GetUsersPointsOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPointOfSaleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersPointsOfSale.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/pointsofsale`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the user\'s Points of Sale
     */
    async getUsersPointsOfSale(requestParameters: GetUsersPointsOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPointOfSaleResponse> {
        const response = await this.getUsersPointsOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get all deposits of a user that are still being processed by Stripe
     */
    async getUsersProcessingDepositsRaw(requestParameters: GetUsersProcessingDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleResponse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersProcessingDeposits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/deposits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleResponseFromJSON));
    }

    /**
     *  Get all deposits of a user that are still being processed by Stripe
     */
    async getUsersProcessingDeposits(requestParameters: GetUsersProcessingDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleResponse>> {
        const response = await this.getUsersProcessingDepositsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get an user\'s products
     */
    async getUsersProductsRaw(requestParameters: GetUsersProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductResponseFromJSON(jsonValue));
    }

    /**
     *  Get an user\'s products
     */
    async getUsersProducts(requestParameters: GetUsersProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductResponse> {
        const response = await this.getUsersProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get an user\'s transactions (from, to or created)
     */
    async getUsersTransactionsRaw(requestParameters: GetUsersTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBaseTransactionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromId !== undefined) {
            queryParameters['fromId'] = requestParameters.fromId;
        }

        if (requestParameters.createdById !== undefined) {
            queryParameters['createdById'] = requestParameters.createdById;
        }

        if (requestParameters.toId !== undefined) {
            queryParameters['toId'] = requestParameters.toId;
        }

        if (requestParameters.productId !== undefined) {
            queryParameters['productId'] = requestParameters.productId;
        }

        if (requestParameters.productRevision !== undefined) {
            queryParameters['productRevision'] = requestParameters.productRevision;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.tillDate !== undefined) {
            queryParameters['tillDate'] = requestParameters.tillDate;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBaseTransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Get an user\'s transactions (from, to or created)
     */
    async getUsersTransactions(requestParameters: GetUsersTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBaseTransactionResponse> {
        const response = await this.getUsersTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get an user\'s transfers
     */
    async getUsersTransfersRaw(requestParameters: GetUsersTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTransferResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.fromId !== undefined) {
            queryParameters['fromId'] = requestParameters.fromId;
        }

        if (requestParameters.toId !== undefined) {
            queryParameters['toId'] = requestParameters.toId;
        }

        if (requestParameters.id2 !== undefined) {
            queryParameters['id'] = requestParameters.id2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/transfers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTransferResponseFromJSON(jsonValue));
    }

    /**
     *  Get an user\'s transfers
     */
    async getUsersTransfers(requestParameters: GetUsersTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTransferResponse> {
        const response = await this.getUsersTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the user\'s updated containers
     */
    async getUsersUpdatedContainersRaw(requestParameters: GetUsersUpdatedContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContainerResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersUpdatedContainers.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/containers/updated`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContainerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the user\'s updated containers
     */
    async getUsersUpdatedContainers(requestParameters: GetUsersUpdatedContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContainerResponse> {
        const response = await this.getUsersUpdatedContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the user\'s updated Points of Sale
     */
    async getUsersUpdatedPointsOfSaleRaw(requestParameters: GetUsersUpdatedPointsOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUpdatedPointOfSaleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersUpdatedPointsOfSale.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/pointsofsale/updated`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUpdatedPointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the user\'s updated Points of Sale
     */
    async getUsersUpdatedPointsOfSale(requestParameters: GetUsersUpdatedPointsOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUpdatedPointOfSaleResponse> {
        const response = await this.getUsersUpdatedPointsOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get an user\'s updated products
     */
    async getUsersUpdatedProductsRaw(requestParameters: GetUsersUpdatedProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsersUpdatedProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/products/updated`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductResponseFromJSON(jsonValue));
    }

    /**
     *  Get an user\'s updated products
     */
    async getUsersUpdatedProducts(requestParameters: GetUsersUpdatedProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductResponse> {
        const response = await this.getUsersUpdatedProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Update a user
     */
    async updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserRequest>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserRequestFromJSON(jsonValue));
    }

    /**
     *  Update a user
     */
    async updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserRequest> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  POST an users update to new key code
     */
    async updateUserKeyRaw(requestParameters: UpdateUserKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateKeyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticator/key`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateKeyResponseFromJSON(jsonValue));
    }

    /**
     *  POST an users update to new key code
     */
    async updateUserKey(requestParameters: UpdateUserKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateKeyResponse> {
        const response = await this.updateUserKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Put a user\'s local password
     */
    async updateUserLocalPasswordRaw(requestParameters: UpdateUserLocalPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserLocalPassword.');
        }

        if (requestParameters.update === null || requestParameters.update === undefined) {
            throw new runtime.RequiredError('update','Required parameter requestParameters.update was null or undefined when calling updateUserLocalPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticator/local`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLocalRequestToJSON(requestParameters.update),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Put a user\'s local password
     */
    async updateUserLocalPassword(requestParameters: UpdateUserLocalPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserLocalPasswordRaw(requestParameters, initOverrides);
    }

    /**
     *  Put a users NFC code
     */
    async updateUserNfcRaw(requestParameters: UpdateUserNfcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserNfc.');
        }

        if (requestParameters.update === null || requestParameters.update === undefined) {
            throw new runtime.RequiredError('update','Required parameter requestParameters.update was null or undefined when calling updateUserNfc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticator/nfc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNfcRequestToJSON(requestParameters.update),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Put a users NFC code
     */
    async updateUserNfc(requestParameters: UpdateUserNfcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserNfcRaw(requestParameters, initOverrides);
    }

    /**
     *  Put an users pin code
     */
    async updateUserPinRaw(requestParameters: UpdateUserPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserPin.');
        }

        if (requestParameters.update === null || requestParameters.update === undefined) {
            throw new runtime.RequiredError('update','Required parameter requestParameters.update was null or undefined when calling updateUserPin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/authenticator/pin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePinRequestToJSON(requestParameters.update),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Put an users pin code
     */
    async updateUserPin(requestParameters: UpdateUserPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserPinRaw(requestParameters, initOverrides);
    }

    /**
     *  Get transaction report for the given user
     */
    async usersIdTransactionsReportGetRaw(requestParameters: UsersIdTransactionsReportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionReportResponse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdTransactionsReportGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.tillDate !== undefined) {
            queryParameters['tillDate'] = requestParameters.tillDate;
        }

        if (requestParameters.fromId !== undefined) {
            queryParameters['fromId'] = requestParameters.fromId;
        }

        if (requestParameters.toId !== undefined) {
            queryParameters['toId'] = requestParameters.toId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/users/{id}/transactions/report`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionReportResponseFromJSON));
    }

    /**
     *  Get transaction report for the given user
     */
    async usersIdTransactionsReportGet(requestParameters: UsersIdTransactionsReportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionReportResponse>> {
        const response = await this.usersIdTransactionsReportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
