/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedVatGroupResponse,
  UpdateVatGroupRequest,
  VatGroup,
  VatGroupRequest,
} from '../models';
import {
    PaginatedVatGroupResponseFromJSON,
    PaginatedVatGroupResponseToJSON,
    UpdateVatGroupRequestFromJSON,
    UpdateVatGroupRequestToJSON,
    VatGroupFromJSON,
    VatGroupToJSON,
    VatGroupRequestFromJSON,
    VatGroupRequestToJSON,
} from '../models';

export interface CreateVatGroupRequest {
    vatGroup: VatGroupRequest;
}

export interface GetAllVatGroupsRequest {
    vatGroupId?: number;
    name?: string;
    percentage?: number;
    deleted?: boolean;
    take?: number;
    skip?: number;
}

export interface GetSingleVatGroupRequest {
    id: number;
}

export interface GetVatDeclarationAmountsRequest {
    year: number;
    period: string;
}

export interface UpdateVatGroupOperationRequest {
    id: number;
    vatGroup: UpdateVatGroupRequest;
}

/**
 * 
 */
export class VatGroupsApi extends runtime.BaseAPI {

    /**
     *  Create a new VAT group
     */
    async createVatGroupRaw(requestParameters: CreateVatGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VatGroup>> {
        if (requestParameters.vatGroup === null || requestParameters.vatGroup === undefined) {
            throw new runtime.RequiredError('vatGroup','Required parameter requestParameters.vatGroup was null or undefined when calling createVatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/vatgroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VatGroupRequestToJSON(requestParameters.vatGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VatGroupFromJSON(jsonValue));
    }

    /**
     *  Create a new VAT group
     */
    async createVatGroup(requestParameters: CreateVatGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VatGroup> {
        const response = await this.createVatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get a list of all VAT groups
     */
    async getAllVatGroupsRaw(requestParameters: GetAllVatGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVatGroupResponse>> {
        const queryParameters: any = {};

        if (requestParameters.vatGroupId !== undefined) {
            queryParameters['vatGroupId'] = requestParameters.vatGroupId;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.percentage !== undefined) {
            queryParameters['percentage'] = requestParameters.percentage;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/vatgroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVatGroupResponseFromJSON(jsonValue));
    }

    /**
     *  Get a list of all VAT groups
     */
    async getAllVatGroups(requestParameters: GetAllVatGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVatGroupResponse> {
        const response = await this.getAllVatGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the requested VAT group
     */
    async getSingleVatGroupRaw(requestParameters: GetSingleVatGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VatGroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleVatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/vatgroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VatGroupFromJSON(jsonValue));
    }

    /**
     *  Returns the requested VAT group
     */
    async getSingleVatGroup(requestParameters: GetSingleVatGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VatGroup> {
        const response = await this.getSingleVatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get the VAT collections needed for VAT declarations
     */
    async getVatDeclarationAmountsRaw(requestParameters: GetVatDeclarationAmountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVatGroupResponse>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling getVatDeclarationAmounts.');
        }

        if (requestParameters.period === null || requestParameters.period === undefined) {
            throw new runtime.RequiredError('period','Required parameter requestParameters.period was null or undefined when calling getVatDeclarationAmounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/vatgroups/declaration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVatGroupResponseFromJSON(jsonValue));
    }

    /**
     *  Get the VAT collections needed for VAT declarations
     */
    async getVatDeclarationAmounts(requestParameters: GetVatDeclarationAmountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVatGroupResponse> {
        const response = await this.getVatDeclarationAmountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Create a new VAT group
     */
    async updateVatGroupRaw(requestParameters: UpdateVatGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VatGroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVatGroup.');
        }

        if (requestParameters.vatGroup === null || requestParameters.vatGroup === undefined) {
            throw new runtime.RequiredError('vatGroup','Required parameter requestParameters.vatGroup was null or undefined when calling updateVatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/vatgroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVatGroupRequestToJSON(requestParameters.vatGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VatGroupFromJSON(jsonValue));
    }

    /**
     *  Create a new VAT group
     */
    async updateVatGroup(requestParameters: UpdateVatGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VatGroup> {
        const response = await this.updateVatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
