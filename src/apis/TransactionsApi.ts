/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedBaseTransactionResponse,
  TransactionRequest,
  TransactionResponse,
} from '../models';
import {
    PaginatedBaseTransactionResponseFromJSON,
    PaginatedBaseTransactionResponseToJSON,
    TransactionRequestFromJSON,
    TransactionRequestToJSON,
    TransactionResponseFromJSON,
    TransactionResponseToJSON,
} from '../models';

export interface CreateTransactionRequest {
    transaction: TransactionRequest;
}

export interface DeleteTransactionRequest {
    id: number;
}

export interface GetAllTransactionsRequest {
    fromId?: number;
    createdById?: number;
    toId?: number;
    pointOfSaleId?: number;
    productId?: number;
    productRevision?: number;
    fromDate?: string;
    tillDate?: string;
    take?: number;
    skip?: number;
}

export interface GetSingleTransactionRequest {
    id: number;
}

export interface TransactionsValidatePostRequest {
    transaction: TransactionRequest;
}

export interface UpdateTransactionRequest {
    id: number;
    transaction: TransactionRequest;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     *  Creates a new transaction
     */
    async createTransactionRaw(requestParameters: CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>> {
        if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
            throw new runtime.RequiredError('transaction','Required parameter requestParameters.transaction was null or undefined when calling createTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRequestToJSON(requestParameters.transaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Creates a new transaction
     */
    async createTransaction(requestParameters: CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse> {
        const response = await this.createTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Deletes a transaction
     */
    async deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Deletes a transaction
     */
    async deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse> {
        const response = await this.deleteTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get a list of all transactions
     */
    async getAllTransactionsRaw(requestParameters: GetAllTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBaseTransactionResponse>> {
        const queryParameters: any = {};

        if (requestParameters.fromId !== undefined) {
            queryParameters['fromId'] = requestParameters.fromId;
        }

        if (requestParameters.createdById !== undefined) {
            queryParameters['createdById'] = requestParameters.createdById;
        }

        if (requestParameters.toId !== undefined) {
            queryParameters['toId'] = requestParameters.toId;
        }

        if (requestParameters.pointOfSaleId !== undefined) {
            queryParameters['pointOfSaleId'] = requestParameters.pointOfSaleId;
        }

        if (requestParameters.productId !== undefined) {
            queryParameters['productId'] = requestParameters.productId;
        }

        if (requestParameters.productRevision !== undefined) {
            queryParameters['productRevision'] = requestParameters.productRevision;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.tillDate !== undefined) {
            queryParameters['tillDate'] = requestParameters.tillDate;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBaseTransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Get a list of all transactions
     */
    async getAllTransactions(requestParameters: GetAllTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBaseTransactionResponse> {
        const response = await this.getAllTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get a single transaction
     */
    async getSingleTransactionRaw(requestParameters: GetSingleTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Get a single transaction
     */
    async getSingleTransaction(requestParameters: GetSingleTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse> {
        const response = await this.getSingleTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Function to validate the transaction immediatly after it is created
     */
    async transactionsValidatePostRaw(requestParameters: TransactionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
            throw new runtime.RequiredError('transaction','Required parameter requestParameters.transaction was null or undefined when calling transactionsValidatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRequestToJSON(requestParameters.transaction),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Function to validate the transaction immediatly after it is created
     */
    async transactionsValidatePost(requestParameters: TransactionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transactionsValidatePostRaw(requestParameters, initOverrides);
    }

    /**
     *  Updates the requested transaction
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTransaction.');
        }

        if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
            throw new runtime.RequiredError('transaction','Required parameter requestParameters.transaction was null or undefined when calling updateTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRequestToJSON(requestParameters.transaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Updates the requested transaction
     */
    async updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
