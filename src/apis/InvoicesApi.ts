/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseInvoiceResponse,
  CreateInvoiceRequest,
  InvoiceResponse,
  PaginatedInvoiceResponse,
  UpdateInvoiceRequest,
} from '../models';
import {
    BaseInvoiceResponseFromJSON,
    BaseInvoiceResponseToJSON,
    CreateInvoiceRequestFromJSON,
    CreateInvoiceRequestToJSON,
    InvoiceResponseFromJSON,
    InvoiceResponseToJSON,
    PaginatedInvoiceResponseFromJSON,
    PaginatedInvoiceResponseToJSON,
    UpdateInvoiceRequestFromJSON,
    UpdateInvoiceRequestToJSON,
} from '../models';

export interface CreateInvoiceOperationRequest {
    invoice: CreateInvoiceRequest;
}

export interface DeleteInvoiceRequest {
    id: number;
}

export interface GetAllInvoicesRequest {
    toId?: number;
    invoiceId?: number;
    state?: number;
    returnEntries?: boolean;
    fromDate?: string;
    tillDate?: string;
}

export interface GetSingleInvoiceRequest {
    id: number;
    returnEntries?: boolean;
}

export interface UpdateInvoiceOperationRequest {
    id: number;
    invoice: UpdateInvoiceRequest;
}

/**
 * 
 */
export class InvoicesApi extends runtime.BaseAPI {

    /**
     *  Adds an invoice to the system.
     */
    async createInvoiceRaw(requestParameters: CreateInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
            throw new runtime.RequiredError('invoice','Required parameter requestParameters.invoice was null or undefined when calling createInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/invoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvoiceRequestToJSON(requestParameters.invoice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     *  Adds an invoice to the system.
     */
    async createInvoice(requestParameters: CreateInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.createInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Deletes an invoice.
     */
    async deleteInvoiceRaw(requestParameters: DeleteInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseInvoiceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseInvoiceResponseFromJSON(jsonValue));
    }

    /**
     *  Deletes an invoice.
     */
    async deleteInvoice(requestParameters: DeleteInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseInvoiceResponse> {
        const response = await this.deleteInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all invoices in the system.
     */
    async getAllInvoicesRaw(requestParameters: GetAllInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedInvoiceResponse>> {
        const queryParameters: any = {};

        if (requestParameters.toId !== undefined) {
            queryParameters['toId'] = requestParameters.toId;
        }

        if (requestParameters.invoiceId !== undefined) {
            queryParameters['invoiceId'] = requestParameters.invoiceId;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.returnEntries !== undefined) {
            queryParameters['returnEntries'] = requestParameters.returnEntries;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.tillDate !== undefined) {
            queryParameters['tillDate'] = requestParameters.tillDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInvoiceResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all invoices in the system.
     */
    async getAllInvoices(requestParameters: GetAllInvoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedInvoiceResponse> {
        const response = await this.getAllInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns a single invoice in the system.
     */
    async getSingleInvoiceRaw(requestParameters: GetSingleInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleInvoice.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnEntries !== undefined) {
            queryParameters['returnEntries'] = requestParameters.returnEntries;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     *  Returns a single invoice in the system.
     */
    async getSingleInvoice(requestParameters: GetSingleInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.getSingleInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Adds an invoice to the system.
     */
    async updateInvoiceRaw(requestParameters: UpdateInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseInvoiceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInvoice.');
        }

        if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
            throw new runtime.RequiredError('invoice','Required parameter requestParameters.invoice was null or undefined when calling updateInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInvoiceRequestToJSON(requestParameters.invoice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseInvoiceResponseFromJSON(jsonValue));
    }

    /**
     *  Adds an invoice to the system.
     */
    async updateInvoice(requestParameters: UpdateInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseInvoiceResponse> {
        const response = await this.updateInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
