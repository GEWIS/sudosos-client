/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePointOfSaleRequest,
  PaginatedBaseTransactionResponse,
  PaginatedContainerResponse,
  PaginatedPointOfSaleResponse,
  PaginatedProductResponse,
  PaginatedUpdatedPointOfSaleResponse,
  PointOfSaleResponse,
  PointOfSaleWithContainersResponse,
  UpdatePointOfSaleRequest,
  UpdatedPointOfSaleResponse,
  UpdatedPointOfSaleWithContainersResponse,
} from '../models';
import {
    CreatePointOfSaleRequestFromJSON,
    CreatePointOfSaleRequestToJSON,
    PaginatedBaseTransactionResponseFromJSON,
    PaginatedBaseTransactionResponseToJSON,
    PaginatedContainerResponseFromJSON,
    PaginatedContainerResponseToJSON,
    PaginatedPointOfSaleResponseFromJSON,
    PaginatedPointOfSaleResponseToJSON,
    PaginatedProductResponseFromJSON,
    PaginatedProductResponseToJSON,
    PaginatedUpdatedPointOfSaleResponseFromJSON,
    PaginatedUpdatedPointOfSaleResponseToJSON,
    PointOfSaleResponseFromJSON,
    PointOfSaleResponseToJSON,
    PointOfSaleWithContainersResponseFromJSON,
    PointOfSaleWithContainersResponseToJSON,
    UpdatePointOfSaleRequestFromJSON,
    UpdatePointOfSaleRequestToJSON,
    UpdatedPointOfSaleResponseFromJSON,
    UpdatedPointOfSaleResponseToJSON,
    UpdatedPointOfSaleWithContainersResponseFromJSON,
    UpdatedPointOfSaleWithContainersResponseToJSON,
} from '../models';

export interface CreatePointOfSaleOperationRequest {
    pointofsale: CreatePointOfSaleRequest;
}

export interface GetAllPointOfSaleContainersRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetAllPointOfSaleProductsRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetAllPointsOfSaleRequest {
    take?: number;
    skip?: number;
}

export interface GetSinglePointOfSaleRequest {
    id: number;
}

export interface GetSingleUpdatedPointOfSaleRequest {
    id: number;
}

export interface GetTransactionsRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetUpdatedRequest {
    take?: number;
    skip?: number;
}

export interface PointsofsaleIdApprovePostRequest {
    id: number;
}

export interface UpdatePointOfSaleOperationRequest {
    id: number;
    pointofsale: UpdatePointOfSaleRequest;
}

/**
 * 
 */
export class PointofsaleApi extends runtime.BaseAPI {

    /**
     *  Create a new Point of Sale.
     */
    async createPointOfSaleRaw(requestParameters: CreatePointOfSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatedPointOfSaleResponse>> {
        if (requestParameters.pointofsale === null || requestParameters.pointofsale === undefined) {
            throw new runtime.RequiredError('pointofsale','Required parameter requestParameters.pointofsale was null or undefined when calling createPointOfSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePointOfSaleRequestToJSON(requestParameters.pointofsale),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatedPointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Create a new Point of Sale.
     */
    async createPointOfSale(requestParameters: CreatePointOfSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatedPointOfSaleResponse> {
        const response = await this.createPointOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the containers of the requested Point of Sale, empty list if POS does not exist
     */
    async getAllPointOfSaleContainersRaw(requestParameters: GetAllPointOfSaleContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContainerResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAllPointOfSaleContainers.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}/containers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContainerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the containers of the requested Point of Sale, empty list if POS does not exist
     */
    async getAllPointOfSaleContainers(requestParameters: GetAllPointOfSaleContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContainerResponse> {
        const response = await this.getAllPointOfSaleContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the products of the requested Point of Sale, empty list if POS does not exist
     */
    async getAllPointOfSaleProductsRaw(requestParameters: GetAllPointOfSaleProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAllPointOfSaleProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the products of the requested Point of Sale, empty list if POS does not exist
     */
    async getAllPointOfSaleProducts(requestParameters: GetAllPointOfSaleProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductResponse> {
        const response = await this.getAllPointOfSaleProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all existing Point of Sales
     */
    async getAllPointsOfSaleRaw(requestParameters: GetAllPointsOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPointOfSaleResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all existing Point of Sales
     */
    async getAllPointsOfSale(requestParameters: GetAllPointsOfSaleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPointOfSaleResponse> {
        const response = await this.getAllPointsOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the requested Point of Sale
     */
    async getSinglePointOfSaleRaw(requestParameters: GetSinglePointOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PointOfSaleWithContainersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSinglePointOfSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PointOfSaleWithContainersResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the requested Point of Sale
     */
    async getSinglePointOfSale(requestParameters: GetSinglePointOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PointOfSaleWithContainersResponse> {
        const response = await this.getSinglePointOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns a single Points of Sale update
     */
    async getSingleUpdatedPointOfSaleRaw(requestParameters: GetSingleUpdatedPointOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatedPointOfSaleWithContainersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleUpdatedPointOfSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}/update`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatedPointOfSaleWithContainersResponseFromJSON(jsonValue));
    }

    /**
     *  Returns a single Points of Sale update
     */
    async getSingleUpdatedPointOfSale(requestParameters: GetSingleUpdatedPointOfSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatedPointOfSaleWithContainersResponse> {
        const response = await this.getSingleUpdatedPointOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns a Point of Sale transactions
     */
    async getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBaseTransactionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBaseTransactionResponseFromJSON(jsonValue));
    }

    /**
     *  Returns a Point of Sale transactions
     */
    async getTransactions(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBaseTransactionResponse> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all updated Points of Sale
     */
    async getUpdatedRaw(requestParameters: GetUpdatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUpdatedPointOfSaleResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/updated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUpdatedPointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all updated Points of Sale
     */
    async getUpdated(requestParameters: GetUpdatedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUpdatedPointOfSaleResponse> {
        const response = await this.getUpdatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Approve a Point of Sale update.
     */
    async pointsofsaleIdApprovePostRaw(requestParameters: PointsofsaleIdApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PointOfSaleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pointsofsaleIdApprovePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}/approve`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Approve a Point of Sale update.
     */
    async pointsofsaleIdApprovePost(requestParameters: PointsofsaleIdApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PointOfSaleResponse> {
        const response = await this.pointsofsaleIdApprovePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Update an existing Point of Sale.
     */
    async updatePointOfSaleRaw(requestParameters: UpdatePointOfSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatedPointOfSaleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePointOfSale.');
        }

        if (requestParameters.pointofsale === null || requestParameters.pointofsale === undefined) {
            throw new runtime.RequiredError('pointofsale','Required parameter requestParameters.pointofsale was null or undefined when calling updatePointOfSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/pointsofsale/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePointOfSaleRequestToJSON(requestParameters.pointofsale),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatedPointOfSaleResponseFromJSON(jsonValue));
    }

    /**
     *  Update an existing Point of Sale.
     */
    async updatePointOfSale(requestParameters: UpdatePointOfSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatedPointOfSaleResponse> {
        const response = await this.updatePointOfSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
