/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContainerWithProductsResponse,
  CreateContainerRequest,
  PaginatedContainerResponse,
  PaginatedProductResponse,
  UpdateContainerRequest,
} from '../models';
import {
    ContainerWithProductsResponseFromJSON,
    ContainerWithProductsResponseToJSON,
    CreateContainerRequestFromJSON,
    CreateContainerRequestToJSON,
    PaginatedContainerResponseFromJSON,
    PaginatedContainerResponseToJSON,
    PaginatedProductResponseFromJSON,
    PaginatedProductResponseToJSON,
    UpdateContainerRequestFromJSON,
    UpdateContainerRequestToJSON,
} from '../models';

export interface ContainersIdApprovePostRequest {
    id: number;
}

export interface CreateContainerOperationRequest {
    container: CreateContainerRequest;
}

export interface GetAllContainersRequest {
    take?: number;
    skip?: number;
}

export interface GetProductsContainerRequest {
    id: number;
    take?: number;
    skip?: number;
}

export interface GetPublicContainersRequest {
    take?: number;
    skip?: number;
}

export interface GetSingleContainerRequest {
    id: number;
}

export interface GetSingleUpdatedContainerRequest {
    id: number;
}

export interface GetUpdatedContainersRequest {
    take?: number;
    skip?: number;
}

export interface UpdateContainerOperationRequest {
    id: number;
    container: UpdateContainerRequest;
}

/**
 * 
 */
export class ContainersApi extends runtime.BaseAPI {

    /**
     *  Approve a container update.
     */
    async containersIdApprovePostRaw(requestParameters: ContainersIdApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerWithProductsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling containersIdApprovePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/{id}/approve`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerWithProductsResponseFromJSON(jsonValue));
    }

    /**
     *  Approve a container update.
     */
    async containersIdApprovePost(requestParameters: ContainersIdApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerWithProductsResponse> {
        const response = await this.containersIdApprovePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Create a new container.
     */
    async createContainerRaw(requestParameters: CreateContainerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerWithProductsResponse>> {
        if (requestParameters.container === null || requestParameters.container === undefined) {
            throw new runtime.RequiredError('container','Required parameter requestParameters.container was null or undefined when calling createContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContainerRequestToJSON(requestParameters.container),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerWithProductsResponseFromJSON(jsonValue));
    }

    /**
     *  Create a new container.
     */
    async createContainer(requestParameters: CreateContainerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerWithProductsResponse> {
        const response = await this.createContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all existing containers
     */
    async getAllContainersRaw(requestParameters: GetAllContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContainerResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContainerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all existing containers
     */
    async getAllContainers(requestParameters: GetAllContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContainerResponse> {
        const response = await this.getAllContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all the products in the container
     */
    async getProductsContainerRaw(requestParameters: GetProductsContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductsContainer.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all the products in the container
     */
    async getProductsContainer(requestParameters: GetProductsContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductResponse> {
        const response = await this.getProductsContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all public container
     */
    async getPublicContainersRaw(requestParameters: GetPublicContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContainerResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/public`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContainerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all public container
     */
    async getPublicContainers(requestParameters: GetPublicContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContainerResponse> {
        const response = await this.getPublicContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the requested container
     */
    async getSingleContainerRaw(requestParameters: GetSingleContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerWithProductsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerWithProductsResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the requested container
     */
    async getSingleContainer(requestParameters: GetSingleContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerWithProductsResponse> {
        const response = await this.getSingleContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the requested updated container
     */
    async getSingleUpdatedContainerRaw(requestParameters: GetSingleUpdatedContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerWithProductsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleUpdatedContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/{id}/update`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerWithProductsResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the requested updated container
     */
    async getSingleUpdatedContainer(requestParameters: GetSingleUpdatedContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerWithProductsResponse> {
        const response = await this.getSingleUpdatedContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all updated containers
     */
    async getUpdatedContainersRaw(requestParameters: GetUpdatedContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContainerResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/updated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContainerResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all updated containers
     */
    async getUpdatedContainers(requestParameters: GetUpdatedContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContainerResponse> {
        const response = await this.getUpdatedContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Update an existing container.
     */
    async updateContainerRaw(requestParameters: UpdateContainerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerWithProductsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateContainer.');
        }

        if (requestParameters.container === null || requestParameters.container === undefined) {
            throw new runtime.RequiredError('container','Required parameter requestParameters.container was null or undefined when calling updateContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/containers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateContainerRequestToJSON(requestParameters.container),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerWithProductsResponseFromJSON(jsonValue));
    }

    /**
     *  Update an existing container.
     */
    async updateContainer(requestParameters: UpdateContainerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerWithProductsResponse> {
        const response = await this.updateContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
