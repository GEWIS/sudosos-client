/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BalanceResponse,
} from '../models';
import {
    BalanceResponseFromJSON,
    BalanceResponseToJSON,
} from '../models';

export interface BalancesAllGetRequest {
    date?: string;
    minBalance?: number;
    maxBalance?: number;
    orderBy?: BalancesAllGetOrderByEnum;
    orderDirection?: BalancesAllGetOrderDirectionEnum;
    take?: number;
    skip?: number;
}

export interface GetBalanceIdRequest {
    id: number;
}

/**
 * 
 */
export class BalanceApi extends runtime.BaseAPI {

    /**
     *  Get balance of the current user
     */
    async balancesAllGetRaw(requestParameters: BalancesAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BalanceResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.minBalance !== undefined) {
            queryParameters['minBalance'] = requestParameters.minBalance;
        }

        if (requestParameters.maxBalance !== undefined) {
            queryParameters['maxBalance'] = requestParameters.maxBalance;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderDirection !== undefined) {
            queryParameters['orderDirection'] = requestParameters.orderDirection;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/balances/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BalanceResponseFromJSON));
    }

    /**
     *  Get balance of the current user
     */
    async balancesAllGet(requestParameters: BalancesAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BalanceResponse>> {
        const response = await this.balancesAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get balance of the current user
     */
    async getBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/balances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceResponseFromJSON(jsonValue));
    }

    /**
     *  Get balance of the current user
     */
    async getBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceResponse> {
        const response = await this.getBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     *  Retrieves the requested balance
     */
    async getBalanceIdRaw(requestParameters: GetBalanceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBalanceId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/balances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceResponseFromJSON(jsonValue));
    }

    /**
     *  Retrieves the requested balance
     */
    async getBalanceId(requestParameters: GetBalanceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceResponse> {
        const response = await this.getBalanceIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BalancesAllGetOrderByEnum = {
    Id: 'id',
    Amount: 'amount'
} as const;
export type BalancesAllGetOrderByEnum = typeof BalancesAllGetOrderByEnum[keyof typeof BalancesAllGetOrderByEnum];
/**
 * @export
 */
export const BalancesAllGetOrderDirectionEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type BalancesAllGetOrderDirectionEnum = typeof BalancesAllGetOrderDirectionEnum[keyof typeof BalancesAllGetOrderDirectionEnum];
