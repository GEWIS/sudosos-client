/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedBasePayoutRequestResponse,
  PayoutRequestRequest,
  PayoutRequestResponse,
  PayoutRequestStatusRequest,
} from '../models';
import {
    PaginatedBasePayoutRequestResponseFromJSON,
    PaginatedBasePayoutRequestResponseToJSON,
    PayoutRequestRequestFromJSON,
    PayoutRequestRequestToJSON,
    PayoutRequestResponseFromJSON,
    PayoutRequestResponseToJSON,
    PayoutRequestStatusRequestFromJSON,
    PayoutRequestStatusRequestToJSON,
} from '../models';

export interface CreatePayoutRequestRequest {
    payoutRequest: PayoutRequestRequest;
}

export interface GetAllPayoutRequestsRequest {
    requestedById?: string;
    approvedById?: string;
    fromDate?: string;
    tillDate?: string;
    status?: string;
    take?: number;
    skip?: number;
}

export interface GetSinglePayoutRequestRequest {
    id: number;
}

export interface SetPayoutRequestStatusRequest {
    id: number;
    state: PayoutRequestStatusRequest;
}

/**
 * 
 */
export class PayoutRequestsApi extends runtime.BaseAPI {

    /**
     *  Create a new payout request
     */
    async createPayoutRequestRaw(requestParameters: CreatePayoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutRequestResponse>> {
        if (requestParameters.payoutRequest === null || requestParameters.payoutRequest === undefined) {
            throw new runtime.RequiredError('payoutRequest','Required parameter requestParameters.payoutRequest was null or undefined when calling createPayoutRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/payoutrequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayoutRequestRequestToJSON(requestParameters.payoutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayoutRequestResponseFromJSON(jsonValue));
    }

    /**
     *  Create a new payout request
     */
    async createPayoutRequest(requestParameters: CreatePayoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutRequestResponse> {
        const response = await this.createPayoutRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all payout requests given the filter parameters
     */
    async getAllPayoutRequestsRaw(requestParameters: GetAllPayoutRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBasePayoutRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.requestedById !== undefined) {
            queryParameters['requestedById'] = requestParameters.requestedById;
        }

        if (requestParameters.approvedById !== undefined) {
            queryParameters['approvedById'] = requestParameters.approvedById;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.tillDate !== undefined) {
            queryParameters['tillDate'] = requestParameters.tillDate;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/payoutrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBasePayoutRequestResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all payout requests given the filter parameters
     */
    async getAllPayoutRequests(requestParameters: GetAllPayoutRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBasePayoutRequestResponse> {
        const response = await this.getAllPayoutRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get a single payout request
     */
    async getSinglePayoutRequestRaw(requestParameters: GetSinglePayoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutRequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSinglePayoutRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/payoutrequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayoutRequestResponseFromJSON(jsonValue));
    }

    /**
     *  Get a single payout request
     */
    async getSinglePayoutRequest(requestParameters: GetSinglePayoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutRequestResponse> {
        const response = await this.getSinglePayoutRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Create a new status for a payout request
     */
    async setPayoutRequestStatusRaw(requestParameters: SetPayoutRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutRequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setPayoutRequestStatus.');
        }

        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling setPayoutRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/payoutrequests/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayoutRequestStatusRequestToJSON(requestParameters.state),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayoutRequestResponseFromJSON(jsonValue));
    }

    /**
     *  Create a new status for a payout request
     */
    async setPayoutRequestStatus(requestParameters: SetPayoutRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutRequestResponse> {
        const response = await this.setPayoutRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
