/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedProductCategoryResponse,
  ProductCategoryRequest,
  ProductCategoryResponse,
} from '../models';
import {
    PaginatedProductCategoryResponseFromJSON,
    PaginatedProductCategoryResponseToJSON,
    ProductCategoryRequestFromJSON,
    ProductCategoryRequestToJSON,
    ProductCategoryResponseFromJSON,
    ProductCategoryResponseToJSON,
} from '../models';

export interface CreateProductCategoryRequest {
    productCategory: ProductCategoryRequest;
}

export interface GetAllProductCategoriesRequest {
    take?: number;
    skip?: number;
}

export interface GetSingleProductCategoryRequest {
    id: number;
}

export interface UpdateProductCategoryRequest {
    id: number;
    productCategory: ProductCategoryRequest;
}

/**
 * 
 */
export class ProductCategoriesApi extends runtime.BaseAPI {

    /**
     *  Post a new productCategory.
     */
    async createProductCategoryRaw(requestParameters: CreateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategoryResponse>> {
        if (requestParameters.productCategory === null || requestParameters.productCategory === undefined) {
            throw new runtime.RequiredError('productCategory','Required parameter requestParameters.productCategory was null or undefined when calling createProductCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/productcategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductCategoryRequestToJSON(requestParameters.productCategory),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCategoryResponseFromJSON(jsonValue));
    }

    /**
     *  Post a new productCategory.
     */
    async createProductCategory(requestParameters: CreateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategoryResponse> {
        const response = await this.createProductCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns all existing productcategories
     */
    async getAllProductCategoriesRaw(requestParameters: GetAllProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductCategoryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/productcategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductCategoryResponseFromJSON(jsonValue));
    }

    /**
     *  Returns all existing productcategories
     */
    async getAllProductCategories(requestParameters: GetAllProductCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductCategoryResponse> {
        const response = await this.getAllProductCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the requested productcategory
     */
    async getSingleProductCategoryRaw(requestParameters: GetSingleProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSingleProductCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/productcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCategoryResponseFromJSON(jsonValue));
    }

    /**
     *  Returns the requested productcategory
     */
    async getSingleProductCategory(requestParameters: GetSingleProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategoryResponse> {
        const response = await this.getSingleProductCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Update an existing productcategory.
     */
    async updateProductCategoryRaw(requestParameters: UpdateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductCategory.');
        }

        if (requestParameters.productCategory === null || requestParameters.productCategory === undefined) {
            throw new runtime.RequiredError('productCategory','Required parameter requestParameters.productCategory was null or undefined when calling updateProductCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/productcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductCategoryRequestToJSON(requestParameters.productCategory),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCategoryResponseFromJSON(jsonValue));
    }

    /**
     *  Update an existing productcategory.
     */
    async updateProductCategory(requestParameters: UpdateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategoryResponse> {
        const response = await this.updateProductCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
