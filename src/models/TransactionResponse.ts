/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BasePointOfSaleResponse } from './BasePointOfSaleResponse';
import {
    BasePointOfSaleResponseFromJSON,
    BasePointOfSaleResponseFromJSONTyped,
    BasePointOfSaleResponseToJSON,
} from './BasePointOfSaleResponse';
import type { BaseUserResponse } from './BaseUserResponse';
import {
    BaseUserResponseFromJSON,
    BaseUserResponseFromJSONTyped,
    BaseUserResponseToJSON,
} from './BaseUserResponse';
import type { DineroObjectResponse } from './DineroObjectResponse';
import {
    DineroObjectResponseFromJSON,
    DineroObjectResponseFromJSONTyped,
    DineroObjectResponseToJSON,
} from './DineroObjectResponse';
import type { SubTransactionResponse } from './SubTransactionResponse';
import {
    SubTransactionResponseFromJSON,
    SubTransactionResponseFromJSONTyped,
    SubTransactionResponseToJSON,
} from './SubTransactionResponse';

/**
 * 
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     * 
     * @type {BaseUserResponse}
     * @memberof TransactionResponse
     */
    from: BaseUserResponse;
    /**
     * 
     * @type {BaseUserResponse}
     * @memberof TransactionResponse
     */
    createdBy?: BaseUserResponse;
    /**
     * 
     * @type {Array<SubTransactionResponse>}
     * @memberof TransactionResponse
     */
    subTransactions: Array<SubTransactionResponse>;
    /**
     * 
     * @type {BasePointOfSaleResponse}
     * @memberof TransactionResponse
     */
    pointOfSale?: BasePointOfSaleResponse;
    /**
     * 
     * @type {DineroObjectResponse}
     * @memberof TransactionResponse
     */
    totalPriceInclVat: DineroObjectResponse;
    /**
     * The unique id of the entity.
     * @type {number}
     * @memberof TransactionResponse
     */
    id: number;
    /**
     * The creation Date of the entity.
     * @type {string}
     * @memberof TransactionResponse
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     * @type {string}
     * @memberof TransactionResponse
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     * @type {number}
     * @memberof TransactionResponse
     */
    version?: number;
}

/**
 * Check if a given object implements the TransactionResponse interface.
 */
export function instanceOfTransactionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "subTransactions" in value;
    isInstance = isInstance && "totalPriceInclVat" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function TransactionResponseFromJSON(json: any): TransactionResponse {
    return TransactionResponseFromJSONTyped(json, false);
}

export function TransactionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': BaseUserResponseFromJSON(json['from']),
        'createdBy': !exists(json, 'createdBy') ? undefined : BaseUserResponseFromJSON(json['createdBy']),
        'subTransactions': ((json['subTransactions'] as Array<any>).map(SubTransactionResponseFromJSON)),
        'pointOfSale': !exists(json, 'pointOfSale') ? undefined : BasePointOfSaleResponseFromJSON(json['pointOfSale']),
        'totalPriceInclVat': DineroObjectResponseFromJSON(json['totalPriceInclVat']),
        'id': json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function TransactionResponseToJSON(value?: TransactionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': BaseUserResponseToJSON(value.from),
        'createdBy': BaseUserResponseToJSON(value.createdBy),
        'subTransactions': ((value.subTransactions as Array<any>).map(SubTransactionResponseToJSON)),
        'pointOfSale': BasePointOfSaleResponseToJSON(value.pointOfSale),
        'totalPriceInclVat': DineroObjectResponseToJSON(value.totalPriceInclVat),
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

