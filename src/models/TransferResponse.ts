/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseInvoiceResponse } from './BaseInvoiceResponse';
import {
    BaseInvoiceResponseFromJSON,
    BaseInvoiceResponseFromJSONTyped,
    BaseInvoiceResponseToJSON,
} from './BaseInvoiceResponse';
import type { BasePayoutRequestResponse } from './BasePayoutRequestResponse';
import {
    BasePayoutRequestResponseFromJSON,
    BasePayoutRequestResponseFromJSONTyped,
    BasePayoutRequestResponseToJSON,
} from './BasePayoutRequestResponse';
import type { BaseUserResponse } from './BaseUserResponse';
import {
    BaseUserResponseFromJSON,
    BaseUserResponseFromJSONTyped,
    BaseUserResponseToJSON,
} from './BaseUserResponse';
import type { Dinero } from './Dinero';
import {
    DineroFromJSON,
    DineroFromJSONTyped,
    DineroToJSON,
} from './Dinero';
import type { StripeDepositResponse } from './StripeDepositResponse';
import {
    StripeDepositResponseFromJSON,
    StripeDepositResponseFromJSONTyped,
    StripeDepositResponseToJSON,
} from './StripeDepositResponse';

/**
 * 
 * @export
 * @interface TransferResponse
 */
export interface TransferResponse {
    /**
     * Description of the transfer
     * @type {string}
     * @memberof TransferResponse
     */
    description: string;
    /**
     * 
     * @type {Dinero}
     * @memberof TransferResponse
     */
    amount: Dinero;
    /**
     * 
     * @type {BaseUserResponse}
     * @memberof TransferResponse
     */
    from?: BaseUserResponse;
    /**
     * 
     * @type {BaseUserResponse}
     * @memberof TransferResponse
     */
    to?: BaseUserResponse;
    /**
     * 
     * @type {BaseInvoiceResponse}
     * @memberof TransferResponse
     */
    invoice?: BaseInvoiceResponse;
    /**
     * 
     * @type {StripeDepositResponse}
     * @memberof TransferResponse
     */
    deposit?: StripeDepositResponse;
    /**
     * 
     * @type {BasePayoutRequestResponse}
     * @memberof TransferResponse
     */
    payoutRequest?: BasePayoutRequestResponse;
    /**
     * The unique id of the entity.
     * @type {number}
     * @memberof TransferResponse
     */
    id: number;
    /**
     * The creation Date of the entity.
     * @type {string}
     * @memberof TransferResponse
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     * @type {string}
     * @memberof TransferResponse
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     * @type {number}
     * @memberof TransferResponse
     */
    version?: number;
}

/**
 * Check if a given object implements the TransferResponse interface.
 */
export function instanceOfTransferResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function TransferResponseFromJSON(json: any): TransferResponse {
    return TransferResponseFromJSONTyped(json, false);
}

export function TransferResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'amount': DineroFromJSON(json['amount']),
        'from': !exists(json, 'from') ? undefined : BaseUserResponseFromJSON(json['from']),
        'to': !exists(json, 'to') ? undefined : BaseUserResponseFromJSON(json['to']),
        'invoice': !exists(json, 'invoice') ? undefined : BaseInvoiceResponseFromJSON(json['invoice']),
        'deposit': !exists(json, 'deposit') ? undefined : StripeDepositResponseFromJSON(json['deposit']),
        'payoutRequest': !exists(json, 'payoutRequest') ? undefined : BasePayoutRequestResponseFromJSON(json['payoutRequest']),
        'id': json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function TransferResponseToJSON(value?: TransferResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'amount': DineroToJSON(value.amount),
        'from': BaseUserResponseToJSON(value.from),
        'to': BaseUserResponseToJSON(value.to),
        'invoice': BaseInvoiceResponseToJSON(value.invoice),
        'deposit': StripeDepositResponseToJSON(value.deposit),
        'payoutRequest': BasePayoutRequestResponseToJSON(value.payoutRequest),
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

