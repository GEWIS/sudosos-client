/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * First name of the user.
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * Last name of the user.
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * Whether the user has accepted the TOS. Defaults to false.
     * @type {boolean}
     * @memberof User
     */
    active?: boolean;
    /**
     * Whether the user is 18+ or not.
     * @type {boolean}
     * @memberof User
     */
    ofAge?: boolean;
    /**
     * The email of the user.
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * Whether the user was deleted. Defaults to false.
     * @type {boolean}
     * @memberof User
     */
    deleted?: boolean;
    /**
     * The type of user.
     * @type {string}
     * @memberof User
     */
    type: string;
    /**
     * The creation date of the object.
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     * The last update date of the object.
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
    /**
     * The current version of the object.
     * @type {number}
     * @memberof User
     */
    version?: number;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'firstName': json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'ofAge': !exists(json, 'ofAge') ? undefined : json['ofAge'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'type': json['type'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'firstName': value.firstName,
        'lastName': value.lastName,
        'active': value.active,
        'ofAge': value.ofAge,
        'email': value.email,
        'deleted': value.deleted,
        'type': value.type,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

