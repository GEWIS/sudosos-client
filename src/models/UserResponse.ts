/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * Whether the user activated
     * @type {boolean}
     * @memberof UserResponse
     */
    active: boolean;
    /**
     * Whether the user is deleted
     * @type {boolean}
     * @memberof UserResponse
     */
    deleted: boolean;
    /**
     * The type of user
     * @type {string}
     * @memberof UserResponse
     */
    type: string;
    /**
     * If local user, the e-mail of the user
     * @type {string}
     * @memberof UserResponse
     */
    email?: string;
    /**
     * Whether this user has accepted the TOS
     * @type {string}
     * @memberof UserResponse
     */
    acceptedToS?: string;
    /**
     * Whether data about this
     * user can be used (non-anonymously) for more data science!
     * @type {boolean}
     * @memberof UserResponse
     */
    extensiveDataProcessing?: boolean;
    /**
     * Whether someone is old enough to drink beer
     * @type {boolean}
     * @memberof UserResponse
     */
    ofAge?: boolean;
    /**
     * The unique id of the entity.
     * @type {number}
     * @memberof UserResponse
     */
    id: number;
    /**
     * The creation Date of the entity.
     * @type {string}
     * @memberof UserResponse
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     * @type {string}
     * @memberof UserResponse
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     * @type {number}
     * @memberof UserResponse
     */
    version?: number;
}

/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "active" in value;
    isInstance = isInstance && "deleted" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'deleted': json['deleted'],
        'type': json['type'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'acceptedToS': !exists(json, 'acceptedToS') ? undefined : json['acceptedToS'],
        'extensiveDataProcessing': !exists(json, 'extensiveDataProcessing') ? undefined : json['extensiveDataProcessing'],
        'ofAge': !exists(json, 'ofAge') ? undefined : json['ofAge'],
        'id': json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function UserResponseToJSON(value?: UserResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'deleted': value.deleted,
        'type': value.type,
        'email': value.email,
        'acceptedToS': value.acceptedToS,
        'extensiveDataProcessing': value.extensiveDataProcessing,
        'ofAge': value.ofAge,
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

