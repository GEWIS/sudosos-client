/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductResponse } from './ProductResponse';
import {
    ProductResponseFromJSON,
    ProductResponseFromJSONTyped,
    ProductResponseToJSON,
} from './ProductResponse';

/**
 * 
 * @export
 * @interface ContainerWithProductsResponse
 */
export interface ContainerWithProductsResponse {
    /**
     * 
     * @type {Array<ProductResponse>}
     * @memberof ContainerWithProductsResponse
     */
    products: Array<ProductResponse>;
    /**
     * The unique id of the entity.
     * @type {number}
     * @memberof ContainerWithProductsResponse
     */
    id: number;
    /**
     * The creation Date of the entity.
     * @type {string}
     * @memberof ContainerWithProductsResponse
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     * @type {string}
     * @memberof ContainerWithProductsResponse
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     * @type {number}
     * @memberof ContainerWithProductsResponse
     */
    version?: number;
}

/**
 * Check if a given object implements the ContainerWithProductsResponse interface.
 */
export function instanceOfContainerWithProductsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "products" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function ContainerWithProductsResponseFromJSON(json: any): ContainerWithProductsResponse {
    return ContainerWithProductsResponseFromJSONTyped(json, false);
}

export function ContainerWithProductsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContainerWithProductsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'products': ((json['products'] as Array<any>).map(ProductResponseFromJSON)),
        'id': json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ContainerWithProductsResponseToJSON(value?: ContainerWithProductsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'products': ((value.products as Array<any>).map(ProductResponseToJSON)),
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

