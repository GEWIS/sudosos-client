/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Dinero } from './Dinero';
import {
    DineroFromJSON,
    DineroFromJSONTyped,
    DineroToJSON,
} from './Dinero';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Transfer
 */
export interface Transfer {
    /**
     * 
     * @type {User}
     * @memberof Transfer
     */
    from?: User;
    /**
     * 
     * @type {User}
     * @memberof Transfer
     */
    to?: User;
    /**
     * 
     * @type {Dinero}
     * @memberof Transfer
     */
    amount: Dinero;
    /**
     * The type of transfer.
     * @type {number}
     * @memberof Transfer
     */
    type: number;
    /**
     * If the transfer is of type 'custom', this contains a
     * description of the transfer.
     * @type {string}
     * @memberof Transfer
     */
    description?: string;
    /**
     * The creation date of the object.
     * @type {string}
     * @memberof Transfer
     */
    createdAt?: string;
    /**
     * The last update date of the object.
     * @type {string}
     * @memberof Transfer
     */
    updatedAt?: string;
    /**
     * The current version of the object.
     * @type {number}
     * @memberof Transfer
     */
    version?: number;
}

/**
 * Check if a given object implements the Transfer interface.
 */
export function instanceOfTransfer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function TransferFromJSON(json: any): Transfer {
    return TransferFromJSONTyped(json, false);
}

export function TransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transfer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': !exists(json, 'from') ? undefined : UserFromJSON(json['from']),
        'to': !exists(json, 'to') ? undefined : UserFromJSON(json['to']),
        'amount': DineroFromJSON(json['amount']),
        'type': json['type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function TransferToJSON(value?: Transfer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': UserToJSON(value.from),
        'to': UserToJSON(value.to),
        'amount': DineroToJSON(value.amount),
        'type': value.type,
        'description': value.description,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

