/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserResponse } from './UserResponse';
import {
    UserResponseFromJSON,
    UserResponseFromJSONTyped,
    UserResponseToJSON,
} from './UserResponse';

/**
 * 
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * 
     * @type {UserResponse}
     * @memberof AuthenticationResponse
     */
    user?: UserResponse;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthenticationResponse
     */
    roles?: Array<string>;
    /**
     * 
     * @type {Array<UserResponse>}
     * @memberof AuthenticationResponse
     */
    organs?: Array<UserResponse>;
    /**
     * The JWT token that can be used as Bearer token for authentication.
     * @type {string}
     * @memberof AuthenticationResponse
     */
    token?: string;
    /**
     * Whether the related user has accepted the Terms of Service
     *  or is not required to.
     * @type {string}
     * @memberof AuthenticationResponse
     */
    acceptedToS?: string;
}

/**
 * Check if a given object implements the AuthenticationResponse interface.
 */
export function instanceOfAuthenticationResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthenticationResponseFromJSON(json: any): AuthenticationResponse {
    return AuthenticationResponseFromJSONTyped(json, false);
}

export function AuthenticationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user': !exists(json, 'user') ? undefined : UserResponseFromJSON(json['user']),
        'roles': !exists(json, 'roles') ? undefined : json['roles'],
        'organs': !exists(json, 'organs') ? undefined : ((json['organs'] as Array<any>).map(UserResponseFromJSON)),
        'token': !exists(json, 'token') ? undefined : json['token'],
        'acceptedToS': !exists(json, 'acceptedToS') ? undefined : json['acceptedToS'],
    };
}

export function AuthenticationResponseToJSON(value?: AuthenticationResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user': UserResponseToJSON(value.user),
        'roles': value.roles,
        'organs': value.organs === undefined ? undefined : ((value.organs as Array<any>).map(UserResponseToJSON)),
        'token': value.token,
        'acceptedToS': value.acceptedToS,
    };
}

