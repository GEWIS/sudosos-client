/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface LocalUser
 */
export interface LocalUser {
    /**
     * 
     * @type {User}
     * @memberof LocalUser
     */
    user: User;
    /**
     * The hashed password of the user.
     * @type {string}
     * @memberof LocalUser
     */
    passwordHash: string;
    /**
     * The creation date of the object.
     * @type {string}
     * @memberof LocalUser
     */
    createdAt?: string;
    /**
     * The last update date of the object.
     * @type {string}
     * @memberof LocalUser
     */
    updatedAt?: string;
    /**
     * The current version of the object.
     * @type {number}
     * @memberof LocalUser
     */
    version?: number;
}

/**
 * Check if a given object implements the LocalUser interface.
 */
export function instanceOfLocalUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "passwordHash" in value;

    return isInstance;
}

export function LocalUserFromJSON(json: any): LocalUser {
    return LocalUserFromJSONTyped(json, false);
}

export function LocalUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocalUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user': UserFromJSON(json['user']),
        'passwordHash': json['passwordHash'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function LocalUserToJSON(value?: LocalUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user': UserToJSON(value.user),
        'passwordHash': value.passwordHash,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
    };
}

