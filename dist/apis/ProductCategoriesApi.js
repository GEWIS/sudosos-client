"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * Back-end API and database management for SudoSOS.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategoriesApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ProductCategoriesApi extends runtime.BaseAPI {
    /**
     *  Post a new productCategory.
     */
    createProductCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.productCategory === null || requestParameters.productCategory === undefined) {
                throw new runtime.RequiredError('productCategory', 'Required parameter requestParameters.productCategory was null or undefined when calling createProductCategory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/productcategories`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ProductCategoryRequestToJSON)(requestParameters.productCategory),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProductCategoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Post a new productCategory.
     */
    createProductCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createProductCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns all existing productcategories
     */
    getAllProductCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/productcategories`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedProductCategoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns all existing productcategories
     */
    getAllProductCategories(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllProductCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the requested productcategory
     */
    getSingleProductCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSingleProductCategory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/productcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProductCategoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the requested productcategory
     */
    getSingleProductCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSingleProductCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Update an existing productcategory.
     */
    updateProductCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateProductCategory.');
            }
            if (requestParameters.productCategory === null || requestParameters.productCategory === undefined) {
                throw new runtime.RequiredError('productCategory', 'Required parameter requestParameters.productCategory was null or undefined when calling updateProductCategory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/productcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ProductCategoryRequestToJSON)(requestParameters.productCategory),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProductCategoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Update an existing productcategory.
     */
    updateProductCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateProductCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ProductCategoriesApi = ProductCategoriesApi;
//# sourceMappingURL=ProductCategoriesApi.js.map