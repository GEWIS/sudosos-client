"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class UsersApi extends runtime.BaseAPI {
    /**
     *  Accept the Terms of Service if you have not accepted it yet
     */
    acceptTosRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.params === null || requestParameters.params === undefined) {
                throw new runtime.RequiredError('params', 'Required parameter requestParameters.params was null or undefined when calling acceptTos.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/acceptTos`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AcceptTosRequestToJSON)(requestParameters.params),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Accept the Terms of Service if you have not accepted it yet
     */
    acceptTos(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.acceptTosRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Authenticate as another user
     */
    authenticateAsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling authenticateAs.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AuthenticationResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Authenticate as another user
     */
    authenticateAs(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authenticateAsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Create a new user
     */
    createUserRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.user === null || requestParameters.user === undefined) {
                throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling createUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CreateUserRequestToJSON)(requestParameters.user),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserFromJSON)(jsonValue));
        });
    }
    /**
     *  Create a new user
     */
    createUser(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createUserRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Delete a single user
     */
    deleteUserRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Delete a single user
     */
    deleteUser(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteUserRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Delete a users key code
     */
    deleteUserKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUserKey.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticator/key`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Delete a users key code
     */
    deleteUserKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteUserKeyRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Delete a nfc code
     */
    deleteUserNfcRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUserNfc.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticator/nfc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Delete a nfc code
     */
    deleteUserNfc(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteUserNfcRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Get a list of all users
     */
    getAllUsersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.active !== undefined) {
                queryParameters['active'] = requestParameters.active;
            }
            if (requestParameters.ofAge !== undefined) {
                queryParameters['ofAge'] = requestParameters.ofAge;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedUserResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get a list of all users
     */
    getAllUsers(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllUsersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get all users of user type
     */
    getAllUsersOfUserTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userType === null || requestParameters.userType === undefined) {
                throw new runtime.RequiredError('userType', 'Required parameter requestParameters.userType was null or undefined when calling getAllUsersOfUserType.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/usertype/{userType}`.replace(`{${"userType"}}`, encodeURIComponent(String(requestParameters.userType))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedUserResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get all users of user type
     */
    getAllUsersOfUserType(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllUsersOfUserTypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get an individual user
     */
    getIndividualUserRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getIndividualUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserFromJSON)(jsonValue));
        });
    }
    /**
     *  Get an individual user
     */
    getIndividualUser(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getIndividualUserRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get an organs members
     */
    getOrganMembersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOrganMembers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedUserResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get an organs members
     */
    getOrganMembers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrganMembersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get all users that the user can authenticate as
     */
    getUserAuthenticatableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUserAuthenticatable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.UserResponseFromJSON));
        });
    }
    /**
     *  Get all users that the user can authenticate as
     */
    getUserAuthenticatable(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserAuthenticatableRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get all roles assigned to the user.
     */
    getUserRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUserRoles.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.RoleResponseFromJSON));
        });
    }
    /**
     *  Get all roles assigned to the user.
     */
    getUserRoles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserRolesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the user\'s containers
     */
    getUsersContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersContainers.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/containers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedContainerResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the user\'s containers
     */
    getUsersContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get all financial mutations of a user.
     */
    getUsersFinancialMutationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersFinancialMutations.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/financialmutations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedFinancialMutationResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get all financial mutations of a user.
     */
    getUsersFinancialMutations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersFinancialMutationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the user\'s Points of Sale
     */
    getUsersPointsOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersPointsOfSale.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/pointsofsale`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedPointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the user\'s Points of Sale
     */
    getUsersPointsOfSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersPointsOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get all deposits of a user that are still being processed by Stripe
     */
    getUsersProcessingDepositsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersProcessingDeposits.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/deposits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.RoleResponseFromJSON));
        });
    }
    /**
     *  Get all deposits of a user that are still being processed by Stripe
     */
    getUsersProcessingDeposits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersProcessingDepositsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get an user\'s products
     */
    getUsersProductsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersProducts.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedProductResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get an user\'s products
     */
    getUsersProducts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersProductsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get an user\'s transactions (from, to or created)
     */
    getUsersTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.fromId !== undefined) {
                queryParameters['fromId'] = requestParameters.fromId;
            }
            if (requestParameters.createdById !== undefined) {
                queryParameters['createdById'] = requestParameters.createdById;
            }
            if (requestParameters.toId !== undefined) {
                queryParameters['toId'] = requestParameters.toId;
            }
            if (requestParameters.productId !== undefined) {
                queryParameters['productId'] = requestParameters.productId;
            }
            if (requestParameters.productRevision !== undefined) {
                queryParameters['productRevision'] = requestParameters.productRevision;
            }
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.tillDate !== undefined) {
                queryParameters['tillDate'] = requestParameters.tillDate;
            }
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedBaseTransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get an user\'s transactions (from, to or created)
     */
    getUsersTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get an user\'s transfers
     */
    getUsersTransfersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersTransfers.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            if (requestParameters.fromId !== undefined) {
                queryParameters['fromId'] = requestParameters.fromId;
            }
            if (requestParameters.toId !== undefined) {
                queryParameters['toId'] = requestParameters.toId;
            }
            if (requestParameters.id2 !== undefined) {
                queryParameters['id'] = requestParameters.id2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/transfers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedTransferResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get an user\'s transfers
     */
    getUsersTransfers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersTransfersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the user\'s updated containers
     */
    getUsersUpdatedContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersUpdatedContainers.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/containers/updated`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedContainerResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the user\'s updated containers
     */
    getUsersUpdatedContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersUpdatedContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the user\'s updated Points of Sale
     */
    getUsersUpdatedPointsOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersUpdatedPointsOfSale.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/pointsofsale/updated`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedUpdatedPointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the user\'s updated Points of Sale
     */
    getUsersUpdatedPointsOfSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersUpdatedPointsOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get an user\'s updated products
     */
    getUsersUpdatedProductsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUsersUpdatedProducts.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/products/updated`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedProductResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get an user\'s updated products
     */
    getUsersUpdatedProducts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersUpdatedProductsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Update a user
     */
    updateUserRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUser.');
            }
            if (requestParameters.user === null || requestParameters.user === undefined) {
                throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling updateUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.UpdateUserRequestToJSON)(requestParameters.user),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdateUserRequestFromJSON)(jsonValue));
        });
    }
    /**
     *  Update a user
     */
    updateUser(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  POST an users update to new key code
     */
    updateUserKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUserKey.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticator/key`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdateKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  POST an users update to new key code
     */
    updateUserKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Put a user\'s local password
     */
    updateUserLocalPasswordRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUserLocalPassword.');
            }
            if (requestParameters.update === null || requestParameters.update === undefined) {
                throw new runtime.RequiredError('update', 'Required parameter requestParameters.update was null or undefined when calling updateUserLocalPassword.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticator/local`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.UpdateLocalRequestToJSON)(requestParameters.update),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Put a user\'s local password
     */
    updateUserLocalPassword(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserLocalPasswordRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Put a users NFC code
     */
    updateUserNfcRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUserNfc.');
            }
            if (requestParameters.update === null || requestParameters.update === undefined) {
                throw new runtime.RequiredError('update', 'Required parameter requestParameters.update was null or undefined when calling updateUserNfc.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticator/nfc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.UpdateNfcRequestToJSON)(requestParameters.update),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Put a users NFC code
     */
    updateUserNfc(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserNfcRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Put an users pin code
     */
    updateUserPinRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUserPin.');
            }
            if (requestParameters.update === null || requestParameters.update === undefined) {
                throw new runtime.RequiredError('update', 'Required parameter requestParameters.update was null or undefined when calling updateUserPin.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/authenticator/pin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.UpdatePinRequestToJSON)(requestParameters.update),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Put an users pin code
     */
    updateUserPin(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserPinRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Get transaction report for the given user
     */
    usersIdTransactionsReportGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling usersIdTransactionsReportGet.');
            }
            const queryParameters = {};
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.tillDate !== undefined) {
                queryParameters['tillDate'] = requestParameters.tillDate;
            }
            if (requestParameters.fromId !== undefined) {
                queryParameters['fromId'] = requestParameters.fromId;
            }
            if (requestParameters.toId !== undefined) {
                queryParameters['toId'] = requestParameters.toId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/users/{id}/transactions/report`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.TransactionReportResponseFromJSON));
        });
    }
    /**
     *  Get transaction report for the given user
     */
    usersIdTransactionsReportGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.usersIdTransactionsReportGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.UsersApi = UsersApi;
//# sourceMappingURL=UsersApi.js.map