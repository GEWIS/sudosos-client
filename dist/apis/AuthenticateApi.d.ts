/**
 * sudosos-back-end
 * Back-end API and database management for SudoSOS.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AuthenticationEanRequest, AuthenticationKeyRequest, AuthenticationLDAPRequest, AuthenticationLocalRequest, AuthenticationMockRequest, AuthenticationNfcRequest, AuthenticationPinRequest, AuthenticationResetTokenRequest, AuthenticationResponse, GEWISAuthenticationPinRequest, GewiswebAuthenticationRequest, ResetLocalRequest } from '../models';
export interface AuthenticationKeyPostRequest {
    req: AuthenticationKeyRequest;
}
export interface AuthenticationNfcPostRequest {
    req: AuthenticationNfcRequest;
}
export interface EanAuthenticationRequest {
    req: AuthenticationEanRequest;
}
export interface GewisLDAPAuthenticationRequest {
    req: AuthenticationLDAPRequest;
}
export interface GewisPinAuthenticationRequest {
    req: GEWISAuthenticationPinRequest;
}
export interface GewisWebAuthenticationRequest {
    req: GewiswebAuthenticationRequest;
}
export interface LdapAuthenticationRequest {
    req: AuthenticationLDAPRequest;
}
export interface LocalAuthenticationRequest {
    req: AuthenticationLocalRequest;
}
export interface MockAuthenticationRequest {
    req: AuthenticationMockRequest;
}
export interface PinAuthenticationRequest {
    req: AuthenticationPinRequest;
}
export interface ResetLocalOperationRequest {
    req: ResetLocalRequest;
}
export interface ResetLocalWithTokenRequest {
    req: AuthenticationResetTokenRequest;
}
/**
 *
 */
export declare class AuthenticateApi extends runtime.BaseAPI {
    /**
     *  Key login and hand out token.
     */
    authenticationKeyPostRaw(requestParameters: AuthenticationKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  Key login and hand out token.
     */
    authenticationKeyPost(requestParameters: AuthenticationKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  NFC login and hand out token
     */
    authenticationNfcPostRaw(requestParameters: AuthenticationNfcPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  NFC login and hand out token
     */
    authenticationNfcPost(requestParameters: AuthenticationNfcPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  EAN login and hand out token
     */
    eanAuthenticationRaw(requestParameters: EanAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  EAN login and hand out token
     */
    eanAuthentication(requestParameters: EanAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  LDAP login and hand out token    If user has never signed in before this also creates an GEWIS account.
     */
    gewisLDAPAuthenticationRaw(requestParameters: GewisLDAPAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  LDAP login and hand out token    If user has never signed in before this also creates an GEWIS account.
     */
    gewisLDAPAuthentication(requestParameters: GewisLDAPAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  PIN login and hand out token.
     */
    gewisPinAuthenticationRaw(requestParameters: GewisPinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  PIN login and hand out token.
     */
    gewisPinAuthentication(requestParameters: GewisPinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  GEWIS login verification based on gewisweb JWT tokens. This method verifies the validity of the gewisweb JWT token, and returns a SudoSOS token if the GEWIS token is valid.
     */
    gewisWebAuthenticationRaw(requestParameters: GewisWebAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  GEWIS login verification based on gewisweb JWT tokens. This method verifies the validity of the gewisweb JWT token, and returns a SudoSOS token if the GEWIS token is valid.
     */
    gewisWebAuthentication(requestParameters: GewisWebAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  LDAP login and hand out token If user has never signed in before this also creates an account.
     */
    ldapAuthenticationRaw(requestParameters: LdapAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  LDAP login and hand out token If user has never signed in before this also creates an account.
     */
    ldapAuthentication(requestParameters: LdapAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  Local login and hand out token
     */
    localAuthenticationRaw(requestParameters: LocalAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  Local login and hand out token
     */
    localAuthentication(requestParameters: LocalAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  Mock login and hand out token.
     */
    mockAuthenticationRaw(requestParameters: MockAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  Mock login and hand out token.
     */
    mockAuthentication(requestParameters: MockAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  PIN login and hand out token
     */
    pinAuthenticationRaw(requestParameters: PinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  PIN login and hand out token
     */
    pinAuthentication(requestParameters: PinAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  Get a new JWT token, lesser if the existing token is also lesser
     */
    refreshTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>>;
    /**
     *  Get a new JWT token, lesser if the existing token is also lesser
     */
    refreshToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse>;
    /**
     *  Creates a reset token for the local authentication
     */
    resetLocalRaw(requestParameters: ResetLocalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     *  Creates a reset token for the local authentication
     */
    resetLocal(requestParameters: ResetLocalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *  Reset local authentication using the provided token
     */
    resetLocalWithTokenRaw(requestParameters: ResetLocalWithTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     *  Reset local authentication using the provided token
     */
    resetLocalWithToken(requestParameters: ResetLocalWithTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
