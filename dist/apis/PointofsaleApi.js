"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PointofsaleApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class PointofsaleApi extends runtime.BaseAPI {
    /**
     *  Create a new Point of Sale.
     */
    createPointOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pointofsale === null || requestParameters.pointofsale === undefined) {
                throw new runtime.RequiredError('pointofsale', 'Required parameter requestParameters.pointofsale was null or undefined when calling createPointOfSale.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CreatePointOfSaleRequestToJSON)(requestParameters.pointofsale),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdatedPointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Create a new Point of Sale.
     */
    createPointOfSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPointOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the containers of the requested Point of Sale, empty list if POS does not exist
     */
    getAllPointOfSaleContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getAllPointOfSaleContainers.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}/containers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedContainerResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the containers of the requested Point of Sale, empty list if POS does not exist
     */
    getAllPointOfSaleContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllPointOfSaleContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the products of the requested Point of Sale, empty list if POS does not exist
     */
    getAllPointOfSaleProductsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getAllPointOfSaleProducts.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedProductResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the products of the requested Point of Sale, empty list if POS does not exist
     */
    getAllPointOfSaleProducts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllPointOfSaleProductsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns all existing Point of Sales
     */
    getAllPointsOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedPointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns all existing Point of Sales
     */
    getAllPointsOfSale(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllPointsOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns the requested Point of Sale
     */
    getSinglePointOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSinglePointOfSale.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PointOfSaleWithContainersResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns the requested Point of Sale
     */
    getSinglePointOfSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSinglePointOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns a single Points of Sale update
     */
    getSingleUpdatedPointOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSingleUpdatedPointOfSale.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}/update`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdatedPointOfSaleWithContainersResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns a single Points of Sale update
     */
    getSingleUpdatedPointOfSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSingleUpdatedPointOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns a Point of Sale transactions
     */
    getTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedBaseTransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns a Point of Sale transactions
     */
    getTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Returns all updated Points of Sale
     */
    getUpdatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/updated`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedUpdatedPointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Returns all updated Points of Sale
     */
    getUpdated(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUpdatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Approve a Point of Sale update.
     */
    pointsofsaleIdApprovePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling pointsofsaleIdApprovePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}/approve`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Approve a Point of Sale update.
     */
    pointsofsaleIdApprovePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pointsofsaleIdApprovePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Update an existing Point of Sale.
     */
    updatePointOfSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updatePointOfSale.');
            }
            if (requestParameters.pointofsale === null || requestParameters.pointofsale === undefined) {
                throw new runtime.RequiredError('pointofsale', 'Required parameter requestParameters.pointofsale was null or undefined when calling updatePointOfSale.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/pointsofsale/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.UpdatePointOfSaleRequestToJSON)(requestParameters.pointofsale),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdatedPointOfSaleResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Update an existing Point of Sale.
     */
    updatePointOfSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updatePointOfSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.PointofsaleApi = PointofsaleApi;
//# sourceMappingURL=PointofsaleApi.js.map