"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * sudosos-back-end
 * Back-end API and database management for SudoSOS.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class TransactionsApi extends runtime.BaseAPI {
    /**
     *  Creates a new transaction
     */
    createTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
                throw new runtime.RequiredError('transaction', 'Required parameter requestParameters.transaction was null or undefined when calling createTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/transactions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.TransactionRequestToJSON)(requestParameters.transaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Creates a new transaction
     */
    createTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Deletes a transaction
     */
    deleteTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Deletes a transaction
     */
    deleteTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get a list of all transactions
     */
    getAllTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fromId !== undefined) {
                queryParameters['fromId'] = requestParameters.fromId;
            }
            if (requestParameters.createdById !== undefined) {
                queryParameters['createdById'] = requestParameters.createdById;
            }
            if (requestParameters.toId !== undefined) {
                queryParameters['toId'] = requestParameters.toId;
            }
            if (requestParameters.pointOfSaleId !== undefined) {
                queryParameters['pointOfSaleId'] = requestParameters.pointOfSaleId;
            }
            if (requestParameters.productId !== undefined) {
                queryParameters['productId'] = requestParameters.productId;
            }
            if (requestParameters.productRevision !== undefined) {
                queryParameters['productRevision'] = requestParameters.productRevision;
            }
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.tillDate !== undefined) {
                queryParameters['tillDate'] = requestParameters.tillDate;
            }
            if (requestParameters.take !== undefined) {
                queryParameters['take'] = requestParameters.take;
            }
            if (requestParameters.skip !== undefined) {
                queryParameters['skip'] = requestParameters.skip;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/transactions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedBaseTransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get a list of all transactions
     */
    getAllTransactions(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Get a single transaction
     */
    getSingleTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSingleTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Get a single transaction
     */
    getSingleTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSingleTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Function to validate the transaction immediatly after it is created
     */
    transactionsValidatePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
                throw new runtime.RequiredError('transaction', 'Required parameter requestParameters.transaction was null or undefined when calling transactionsValidatePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/transactions/validate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.TransactionRequestToJSON)(requestParameters.transaction),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  Function to validate the transaction immediatly after it is created
     */
    transactionsValidatePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transactionsValidatePostRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  Updates the requested transaction
     */
    updateTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateTransaction.');
            }
            if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
                throw new runtime.RequiredError('transaction', 'Required parameter requestParameters.transaction was null or undefined when calling updateTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
            }
            const response = yield this.request({
                path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.TransactionRequestToJSON)(requestParameters.transaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionResponseFromJSON)(jsonValue));
        });
    }
    /**
     *  Updates the requested transaction
     */
    updateTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.TransactionsApi = TransactionsApi;
//# sourceMappingURL=TransactionsApi.js.map